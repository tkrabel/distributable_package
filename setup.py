#! /usr/bin/env python

# check setuptools source code 
# https://bitbucket.org/pypa/setuptools/src/312a67d000cb05d15b854957466c4751cf5e1c08/setuptools/command/install.py?at=default&fileviewer=file-view-default

from pkg_resources import parse_version # to compare versions correctly (e.g. '10.0.0' > '2.0.0')
from Cython.Build import cythonize
from Cython.Distutils import build_ext
import setuptools
import os
import platform # get python version and python inplementation
import shutil
import sys
import traceback

if sys.version_info < (3, 6):
    raise RuntimeError("Python 3.6 or later required. The current"
                       " Python version is %s installed in %s."
                       % (platform.python_version(), sys.executable))

DISTNAME = 'dispypkg'
DESCRIPTION = 'Description'
with open('README.rst') as f:
    LONG_DESCRIPTION = f.read()
MAINTAINER = 'TK'
MAINTAINER_EMAIL = 'tobiaskrabel@gmail.com'
URL = ''
DOWNLOAD_URL = 'https://pypi.org/project/dispypkg/#files'
LICENSE = 'new BSD'
VERSION = '0.0.4'


class CustomBuildExt(build_ext):
    def run(self):
        build_ext.run(self)
        build_dir = os.path.realpath(self.build_lib)
        root_dir = os.path.dirname(os.path.realpath(__file__))
        target_dir = build_dir if not self.inplace else root_dir
        self.copy_file(f'{DISTNAME}/__init__.py', root_dir, target_dir)

    def copy_file(self, path, source_dir, destination_dir):
        if os.path.exists(os.path.join(source_dir, path)):
            shutil.copyfile(os.path.join(source_dir, path), 
                            os.path.join(destination_dir, path))

cmdclass = {'build_ext': CustomBuildExt}


# Optional wheelhouse-uploader features
# To automate release of binary packages for dispypkg we need a tool
# to download the packages generated by travis and appveyor workers (with
# version number matching the current release) and upload them all at once
# to PyPI at release time.
# The URL of the artifact repositories are configured in the setup.cfg file.

WHEELHOUSE_UPLOADER_COMMANDS = {'fetch_artifacts', 'upload_all'}
if WHEELHOUSE_UPLOADER_COMMANDS.intersection(sys.argv):
    import wheelhouse_uploader.cmd

    cmdclass.update(vars(wheelhouse_uploader.cmd))


def setup_package():
    metadata = dict(name=DISTNAME,
                    maintainer=MAINTAINER,
                    maintainer_email=MAINTAINER_EMAIL,
                    description=DESCRIPTION,
                    license=LICENSE,
                    url=URL,
                    download_url=DOWNLOAD_URL,
                    version=VERSION,
                    long_description=LONG_DESCRIPTION,
                    classifiers=['Intended Audience :: Data Scientists',
                                 'Programming Language :: C',
                                 'Programming Language :: Python',
                                 'Operating System :: Microsoft :: Windows',
                                 'Operating System :: POSIX',
                                 'Operating System :: Unix',
                                 'Operating System :: MacOS',
                                 'Programming Language :: Python :: 3.6',
                                 'Programming Language :: Python :: 3.7'
                                 ],
                    cmdclass=cmdclass,
                    ext_modules=cythonize([
                        setuptools.extension(
                            "%s.*" % DISTNAME, 
                            ["%s/*.py" % DISTNAME]
                        )
                    ])
                )

    setuptools.setup(**metadata)

if __name__ == "__main__":
    setup_package()
